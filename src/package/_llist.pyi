import typing
from collections.abc import Sequence
from typing import Any, Generic, Optional, TypeVar
from _typeshed import Incomplete as Incomplete


T = TypeVar('T')


class dllist:
    first: Optional[dllistnode[Any]]
    last: Optional[dllistnode[Any]]
    size: int

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, items: Sequence[Any]) -> None: ...

    @typing.overload
    def append(self, value: T) -> dllistnode[T]: ...
    @typing.overload
    def append(self, node: dllistnode[T]) -> dllistnode[T]: ...

    @typing.overload
    def appendleft(self, value: T) -> dllistnode[T]: ...
    @typing.overload
    def appendleft(self, node: dllistnode[T]) -> dllistnode[T]: ...

    @typing.overload
    def appendright(self, value: T) -> dllistnode[T]: ...
    @typing.overload
    def appendright(self, node: dllistnode[T]) -> dllistnode[T]: ...

    def appendnode(self, node: dllistnode[T]) -> dllistnode[T]: ...

    def clear(self) -> None: ...

    def extend(self, items: Sequence[Any]) -> None: ...

    def extendleft(self, items: Sequence[Any]) -> None: ...

    def extendright(self, items: Sequence[Any]) -> None: ...

    @typing.overload
    def insert(self, value: T, before_ref: Optional[dllistnode[Any]] = None) -> dllistnode[T]: ...
    @typing.overload
    def insert(self, node: dllistnode[T], before_ref: Optional[dllistnode[Any]] = None) -> dllistnode[T]: ...

    @typing.overload
    def insertafter(self, value: T, after_ref: dllistnode[Any]) -> dllistnode[T]: ...
    @typing.overload
    def insertafter(self, node: dllistnode[T], after_ref: dllistnode[Any]) -> dllistnode[T]: ...

    @typing.overload
    def insertbefore(self, value: T, before_ref: dllistnode[Any]) -> dllistnode[T]: ...
    @typing.overload
    def insertbefore(self, node: dllistnode[T], before_ref: dllistnode[Any]) -> dllistnode[T]: ...

    def insertnode(self, node: dllistnode[T], before_ref: Optional[dllistnode[Any]] = None) -> dllistnode[T]: ...

    def insertnodeafter(self, node: dllistnode[T], after_ref: dllistnode[Any]) -> dllistnode[T]: ...

    def insertnodebefore(self, node: dllistnode[T], before_ref: dllistnode[Any]) -> dllistnode[T]: ...

    def iternodes(self) -> dllistnodeiterator: ...

    def itervalues(self) -> dllistiterator: ...

    def nodeat(self, index: int) -> dllistnode[Any]: ...

    def pop(self) -> Any: ...

    def popleft(self) -> Any: ...

    def popright(self) -> Any: ...

    def remove(self, node: dllistnode[T]) -> T: ...

    def rotate(self, n: int) -> None: ...

    def __add__(self, other: Any) -> None: ...
    def __delitem__(self, other: Any) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def __getitem__(self, index: int) -> None: ...
    def __gt__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other: Any) -> None: ...
    def __iter__(self) -> dllistiterator[Any]: ...
    def __le__(self, other: Any) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: Any) -> bool: ...
    def __mul__(self, other: Any) -> None: ...
    def __ne__(self, other: Any) -> bool: ...
    def __rmul__(self, other: Any) -> None: ...
    def __setitem__(self, index: int, value: Any) -> None: ...


class dllistnode(Generic[T]):
    value: Optional[T]
    prev: Optional[dllistnode[Any]]
    next: Optional[dllistnode[Any]]
    owner: Optional[dllist]

    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self) -> Optional[T]: ...


class dllistiterator:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __iter__(self) -> dllistiterator: ...
    def __next__(self) -> Any: ...


class dllistnodeiterator:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __iter__(self) -> dllistnodeiterator: ...
    def __next__(self) -> dllistnode[Any]: ...


class sllist:
    first: Optional[sllistnode[Any]]
    last: Optional[sllistnode[Any]]
    size: int

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, items: Sequence[Any]) -> None: ...

    @typing.overload
    def append(self, value: T) -> sllistnode[T]: ...
    @typing.overload
    def append(self, node: sllistnode[T]) -> sllistnode[T]: ...

    @typing.overload
    def appendleft(self, value: T) -> sllistnode[T]: ...
    @typing.overload
    def appendleft(self, node: sllistnode[T]) -> sllistnode[T]: ...

    @typing.overload
    def appendright(self, value: T) -> sllistnode[T]: ...
    @typing.overload
    def appendright(self, node: sllistnode[T]) -> sllistnode[T]: ...

    def appendnode(self, node: sllistnode[T]) -> sllistnode[T]: ...

    def clear(self) -> None: ...

    def extend(self, items: Sequence[Any]) -> None: ...

    def extendleft(self, items: Sequence[Any]) -> None: ...

    def extendright(self, items: Sequence[Any]) -> None: ...

    @typing.overload
    def insertafter(self, value: T, after_ref: sllistnode[Any]) -> sllistnode[T]: ...
    @typing.overload
    def insertafter(self, node: sllistnode[T], after_ref: sllistnode[Any]) -> sllistnode[T]: ...

    @typing.overload
    def insertbefore(self, value: T, before_ref: sllistnode[Any]) -> sllistnode[T]: ...
    @typing.overload
    def insertbefore(self, node: sllistnode[T], before_ref: sllistnode[Any]) -> sllistnode[T]: ...

    def insertnodeafter(self, node: sllistnode[T], after_ref: sllistnode[Any]) -> sllistnode[T]: ...

    def insertnodebefore(self, node: sllistnode[T], before_ref: sllistnode[Any]) -> sllistnode[T]: ...

    def iternodes(self) -> sllistnodeiterator: ...

    def itervalues(self) -> sllistiterator: ...

    def nodeat(self, index: int) -> sllistnode[Any]: ...

    def pop(self) -> Any: ...

    def popleft(self) -> Any: ...

    def popright(self) -> Any: ...

    def remove(self, node: sllistnode[T]) -> T: ...

    def rotate(self, n: int) -> None: ...

    def __add__(self, other: Any) -> None: ...
    def __delitem__(self, other: Any) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def __getitem__(self, index: int) -> None: ...
    def __gt__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other: Any) -> None: ...
    def __iter__(self) -> sllistiterator[Any]: ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: Any) -> bool: ...
    def __mul__(self, other : Any) -> None: ...
    def __ne__(self, other: Any) -> bool: ...
    def __rmul__(self, other: Any) -> None: ...
    def __setitem__(self, index: int, value: Any) -> None: ...


class sllistnode(Generic[T]):
    value: Optional[T]
    next: Optional[sllistnode[Any]]
    owner: Optional[sllist]

    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self) -> Optional[T]: ...


class sllistiterator:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __iter__(self) -> sllistiterator: ...
    def __next__(self) -> Any: ...


class sllistnodeiterator:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __iter__(self) -> sllistnodeiterator: ...
    def __next__(self) -> sllistnode[Any]: ...
