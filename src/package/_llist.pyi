from _typeshed import Incomplete as Incomplete

class dllist:
    first: Incomplete
    last: Incomplete
    size: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, *args, **kwargs) -> None: ...
    def appendleft(self, *args, **kwargs) -> None: ...
    def appendnode(self, *args, **kwargs) -> None: ...
    def appendright(self, *args, **kwargs) -> None: ...
    def clear(self, *args, **kwargs) -> None: ...
    def extend(self, *args, **kwargs) -> None: ...
    def extendleft(self, *args, **kwargs) -> None: ...
    def extendright(self, *args, **kwargs) -> None: ...
    def insert(self, *args, **kwargs) -> None: ...
    def insertafter(self, *args, **kwargs) -> None: ...
    def insertbefore(self, *args, **kwargs) -> None: ...
    def insertnode(self, *args, **kwargs) -> None: ...
    def insertnodeafter(self, *args, **kwargs) -> None: ...
    def insertnodebefore(self, *args, **kwargs) -> None: ...
    def iternodes(self, *args, **kwargs) -> None: ...
    def itervalues(self, *args, **kwargs) -> None: ...
    def nodeat(self, *args, **kwargs) -> None: ...
    def pop(self, *args, **kwargs) -> None: ...
    def popleft(self, *args, **kwargs) -> None: ...
    def popright(self, *args, **kwargs) -> None: ...
    def remove(self, *args, **kwargs) -> None: ...
    def rotate(self, *args, **kwargs) -> None: ...
    def __add__(self, other) -> None: ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index) -> None: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other) -> None: ...
    def __iter__(self): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __rmul__(self, other) -> None: ...
    def __setitem__(self, index, object) -> None: ...

class dllistiterator:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __next__(self) -> None: ...

class dllistnode:
    next: Incomplete
    owner: Incomplete
    prev: Incomplete
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs) -> None: ...

class dllistnodeiterator:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __next__(self) -> None: ...

class sllist:
    first: Incomplete
    last: Incomplete
    size: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, *args, **kwargs) -> None: ...
    def appendleft(self, *args, **kwargs) -> None: ...
    def appendnode(self, *args, **kwargs) -> None: ...
    def appendright(self, *args, **kwargs) -> None: ...
    def clear(self, *args, **kwargs) -> None: ...
    def extend(self, *args, **kwargs) -> None: ...
    def extendleft(self, *args, **kwargs) -> None: ...
    def extendright(self, *args, **kwargs) -> None: ...
    def insertafter(self, *args, **kwargs) -> None: ...
    def insertbefore(self, *args, **kwargs) -> None: ...
    def insertnodeafter(self, *args, **kwargs) -> None: ...
    def insertnodebefore(self, *args, **kwargs) -> None: ...
    def iternodes(self, *args, **kwargs) -> None: ...
    def itervalues(self, *args, **kwargs) -> None: ...
    def nodeat(self, *args, **kwargs) -> None: ...
    def pop(self, *args, **kwargs) -> None: ...
    def popleft(self, *args, **kwargs) -> None: ...
    def popright(self, *args, **kwargs) -> None: ...
    def remove(self, *args, **kwargs) -> None: ...
    def rotate(self, *args, **kwargs) -> None: ...
    def __add__(self, other) -> None: ...
    def __delitem__(self, other) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index) -> None: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __iadd__(self, other) -> None: ...
    def __iter__(self): ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __rmul__(self, other) -> None: ...
    def __setitem__(self, index, object) -> None: ...

class sllistiterator:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __next__(self) -> None: ...

class sllistnode:
    next: Incomplete
    owner: Incomplete
    value: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs) -> None: ...

class sllistnodeiterator:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __iter__(self): ...
    def __next__(self) -> None: ...
